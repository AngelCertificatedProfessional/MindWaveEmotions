/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mindwabe;

import java.awt.TrayIcon;
import java.io.IOException;
import java.util.Date;
import mindwabe.Cliente.ClienteTCP;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author LiutsCertificatedProfessional
 * Utilizando el parte del codigo de ericblue
 */
public class Interfaz_Diadema extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form Interfaz_Diadema
     */
    ClienteTCP clienteTCP;

    public Interfaz_Diadema() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        relajacionLbl = new javax.swing.JLabel();
        guineoLbl = new javax.swing.JLabel();
        concentracionLbl = new javax.swing.JLabel();
        estadoLbl = new javax.swing.JLabel();
        senalLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Datos Enviados por la MindWave: ");

        relajacionLbl.setText("Relajacion:");

        guineoLbl.setText("Guineo:");

        concentracionLbl.setText("Concentracion: ");

        estadoLbl.setText("Estado: ");

        senalLbl.setText("Senal: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(relajacionLbl)
                            .addComponent(guineoLbl)
                            .addComponent(concentracionLbl)
                            .addComponent(estadoLbl)
                            .addComponent(senalLbl)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addContainerGap(603, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(53, 53, 53)
                .addComponent(estadoLbl)
                .addGap(33, 33, 33)
                .addComponent(senalLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                .addComponent(concentracionLbl)
                .addGap(35, 35, 35)
                .addComponent(relajacionLbl)
                .addGap(38, 38, 38)
                .addComponent(guineoLbl)
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Diadema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Diadema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Diadema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Diadema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                boolean condicion = false;
                Interfaz_Diadema interfaz = new Interfaz_Diadema();
                interfaz.setVisible(true);
                while (!condicion) {
                    condicion = interfaz.crearConexion();
                }
                if (condicion == true) {
                    (new Thread(interfaz)).start();
                }

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel concentracionLbl;
    private javax.swing.JLabel estadoLbl;
    private javax.swing.JLabel guineoLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel relajacionLbl;
    private javax.swing.JLabel senalLbl;
    // End of variables declaration//GEN-END:variables

    public boolean crearConexion() {
        clienteTCP = new ClienteTCP();
        clienteTCP.connect();
        if (clienteTCP.isConnected() == true) {
            estadoLbl.setText("Estado: Conectado");
            return true;
        } else {
            estadoLbl.setText("Estado: Desonectado");
            return false;
        }
    }

    public void recibirDatos() {
        while (clienteTCP.isDataAvailable()) {
            try {
                if (clienteTCP.isDataAvailable()) {
                    senalLbl.setText("Senal: " + clienteTCP.getData());
                    try {
                        String clientData = clienteTCP.getData();
                        JSONObject json = new JSONObject(clientData);

                        /*
                         * JH: check just in case it's not there due
                         * to poorSignallevel
                         */
                        if (!json.isNull("eegPower")) {
                            /*
                             * JH: check for existence of
                             * poorSignalLevel. If not available,
                             * assume 0 *
                             */
                            if (!json.isNull("poorSignalLevel")) {
                                //writer.append(Integer.toString(json.getInt("poorSignalLevel")) + ',');
                            } else {
                                //writer.append("0,");
                            }

                            /*
                             * JH: check for existence of eSense. I
                             * noticed it's possible to get eegPower
                             * without eSense when poorSignallevel
                             * >0
                             */
                            if (!json.isNull("eSense")) {

                                JSONObject esense = json.getJSONObject("eSense");

                                /*
                                 * JH: Don't know if it's possible
                                 * for these attributes to not exist
                                 * even when the JSON Object exists
                                 */
                                concentracionLbl.setText(Integer.toString(esense.getInt("attention")) + ',');
                                relajacionLbl.setText(Integer.toString(esense.getInt("meditation")) + ',');

                            } else {
                                //logger.debug("$SwingWorker<Void,Void>.doInBackground() - eSense is null!");
                            }

                            JSONObject eegPower = json.getJSONObject("eegPower");
                                /*
                            writer.append(Integer.toString(eegPower.getInt("delta")) + ',');
                            writer.append(Integer.toString(eegPower.getInt("theta")) + ',');
                            writer.append(Integer.toString(eegPower.getInt("lowAlpha")) + ',');
                            writer.append(Integer.toString(eegPower.getInt("highAlpha")) + ',');
                            writer.append(Integer.toString(eegPower.getInt("lowBeta")) + ',');
                            writer.append(Integer.toString(eegPower.getInt("highBeta")) + ',');
                            writer.append(Integer.toString(eegPower.getInt("lowGamma")) + ',');
                            writer.append(Integer.toString(eegPower.getInt("highGamma")));
                            writer.append(newLine);
                                        */
                        } else {
                        }

                    } catch (JSONException e1) {
                        System.out.println(e1);
                    }
                } else if (clienteTCP.isConnected() == false) {
                    crearConexion();
                }
            } catch (Exception e) {
                crearConexion();
            }
        }

    }

    public void run() {
        recibirDatos();
    }
}
